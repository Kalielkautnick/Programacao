//A LÓGICA É MUITO PARECIDA COM O VALIDADOR DE CNPJ, ENTÃO BASTOU TROCAR ALGUNS VALORES E O RESTO DAS VARIÁVEIS CONTINUA IGUAL

function valida_CPF(CPF: string): boolean;
var   dig10, dig11: string;
    sm, i, r, peso: integer;
begin
     CPF := StringReplace(CPF,'.','', [rfReplaceAll]);
     CPF := StringReplace(CPF,'/','', [rfReplaceAll]);
     CPF := StringReplace(CPF,'-','', [rfReplaceAll]);
// length - retorna o tamanho da string do CPF (CPF é um número formado por 14 dígitos)
  if (length(CPF) <> 11) then
     begin
            valida_CPF := false;
            exit;
          end;

// try - protege o código para eventuais erros de conversão de tipo na função StrToInt
  try
{  Cálculo do 1o. Digito Verificador }
    sm := 0;
    peso := 10;
    for i := 1 to 9 do
    begin
// StrToInt converte o i-ésimo caractere do CPF em um número
      sm := sm + (StrToInt(CPF[i]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (sm mod 11);
    if ((r = 10) or (r = 11))
       then dig10 := '0'
    else str(r:1, dig10); // converte um número no respectivo caractere numérico

{ Cálculo do 2o. Digito Verificador }
    sm := 0;
    peso := 11;
    for i := 1 to 10 do
    begin
      sm := sm + (StrToInt(CPF[i]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (sm mod 11);
    if ((r = 10) or (r = 11))
       then dig11 := '0'
    else str(r:1, dig11);

{ Verifica se os digitos calculados conferem com os digitos informados. }
    if ((dig10 = CPF[10]) and (dig11 = CPF[11]))
       then valida_CPF := true
    else valida_CPF := false;
  except
    valida_CPF := false
  end;
end;
